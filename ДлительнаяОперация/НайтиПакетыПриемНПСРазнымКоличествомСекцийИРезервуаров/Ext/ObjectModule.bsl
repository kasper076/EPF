
#Область ОсновнойРаздел
Процедура ИсполнитьАлгоритмДлительнойОперации(ПараметрыВыполнения)
	
	СписокФайлов = Новый ТаблицаЗначений();
	СписокФайлов.Колонки.Добавить("ИмяФайла");
	
	МассивСсылок = ПолучитьМассивСсылок(ПараметрыВыполнения);
	ВсегоЭлементов = МассивСсылок.Количество();
	
	ПараметрыВыполнения.Вставить("Всего",	ВсегоЭлементов);
	ПараметрыВыполнения.Вставить("Номер",	0);
	ПараметрыВыполнения.Вставить("Порядок",	0);
	ПараметрыВыполнения.Вставить("Время",	'00010101');
	
	Для Каждого ПрикрепленныйФайл Из МассивСсылок Цикл
		
		ПараметрыВыполнения.Номер = ПараметрыВыполнения.Номер + 1;
		
		ОтправитьСообщение(ПолучитьТекстСообщения(ПараметрыВыполнения, ПрикрепленныйФайл));
				
		Если Не ФайлСодержитДанные(ПрикрепленныйФайл, ПараметрыВыполнения) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СписокФайлов.Добавить();
		НоваяСтрока.ИмяФайла = ПрикрепленныйФайл;
		
	КонецЦикла;	
	
	ПараметрыВыполнения.Вставить("Результат", СписокФайлов);
	
КонецПроцедуры

Процедура ВыполнитьДлительнуюОперацию(ПараметрыВыполнения, РезультатАдресХранилища) Экспорт
	
	ИсполнитьАлгоритмДлительнойОперации(ПараметрыВыполнения);
	ПоместитьВоВременноеХранилище(ПараметрыВыполнения.Результат, РезультатАдресХранилища);
	
КонецПроцедуры
#Конецобласти

#Область ПолучениеДанных
Функция ПолучитьМассивСсылок(ПараметрыВыполнения)
	
	РазмерПорции = Цел(ПараметрыВыполнения.КоличествоЭлементов / ПараметрыВыполнения.КоличествоПорций);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса( 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	рн_СеансыОбменаОбъекты.Ссылка КАК СеансОбмена
	|ПОМЕСТИТЬ ВТ_Сеансы
	|ИЗ
	|	Документ.рн_СеансыОбмена.Объекты КАК рн_СеансыОбменаОбъекты
	|ГДЕ
	|	рн_СеансыОбменаОбъекты.ТипОбъекта = &ТипОбъекта
	|	И рн_СеансыОбменаОбъекты.Ссылка.Система = ЗНАЧЕНИЕ(Справочник.рн_МодулиИнтеграции.GCрозница)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СеансОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		рн_СеансыОбменаПрисоединенныеФайлы.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.рн_СеансыОбменаПрисоединенныеФайлы КАК рн_СеансыОбменаПрисоединенныеФайлы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Сеансы КАК ВТ_Сеансы
	|			ПО рн_СеансыОбменаПрисоединенныеФайлы.ВладелецФайла = ВТ_Сеансы.СеансОбмена
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Ссылка) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ");
	
	Оператор = СхемаЗапроса.ПакетЗапросов[1].Операторы[0];
	Оператор.КоличествоПолучаемыхЗаписей = ?(ПараметрыВыполнения.НомерПорции = ПараметрыВыполнения.КоличествоПорций, ПараметрыВыполнения.КоличествоЭлементов - РазмерПорции * (ПараметрыВыполнения.КоличествоПорций - 1), РазмерПорции);
	Оператор = Оператор.Источники[0].Источник.Запрос.Операторы[0];
	Оператор.КоличествоПолучаемыхЗаписей = ?(ПараметрыВыполнения.НомерПорции = ПараметрыВыполнения.КоличествоПорций, ПараметрыВыполнения.КоличествоЭлементов, РазмерПорции * ПараметрыВыполнения.НомерПорции);
	
	Запрос = Новый Запрос(СхемаЗапроса.ПолучитьТекстЗапроса());
	Запрос.Параметры.Вставить("ТипОбъекта", ПараметрыВыполнения.ТипОбъекта);
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;
	
КонецФункции	
#Конецобласти

#Область РаботаСФайлами
Функция ФайлСодержитДанные(ПрикрепленныйФайл, ПараметрыВыполнения)
	
	// Получим приложенный к сеансу обмена zip-архив
	ДвоичныеДанныеПакетаДанных = РаботаСФайлами.ДвоичныеДанныеФайла(ПрикрепленныйФайл);
	
	// Начинаем распаковку
	ПотокПакетаДанных = ДвоичныеДанныеПакетаДанных.ОткрытьПотокДляЧтения();
	//Если архив целый
	Попытка
		ЧтениеZIP = Новый ЧтениеZipФайла(ПотокПакетаДанных);
	Исключение
		ОтправитьСообщение(ПолучитьТекстСообщения(ПараметрыВыполнения, "Не прочитан архив " + ПрикрепленныйФайл));
		Возврат Ложь;
	КонецПопытки;	
	
	// Путь к каталогу временных файлов
	ИмяКаталога = КаталогВременныхФайлов() + ПараметрыВыполнения.НомерПорции + "\";
	
	ФайлПолучен = Ложь;
	Для Каждого ЭлементZIP Из ЧтениеZIP.Элементы Цикл
		
		//Если в архиве не пустой XML
		Если ВРег(ЭлементZIP.Расширение) <> "XML" Или ЭлементZIP.РазмерНесжатого = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//Если файл в архиве целый
		Попытка
			ЧтениеZIP.Извлечь(ЭлементZIP, ИмяКаталога);
		Исключение
			ОтправитьСообщение(ПолучитьТекстСообщения(ПараметрыВыполнения, "Не извлечен файл " + ИмяКаталога + ЭлементZIP.Имя));
			Продолжить;
		КонецПопытки;
		
		ПутьКФайлуXML = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталога, ЭлементZIP.Имя);
		
		ФайлПолучен = Истина;
		
		Прервать;
		
	КонецЦикла;
	
	Если Не ФайлПолучен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Завершаем распаковку
	ЧтениеZIP.Закрыть();
	ПотокПакетаДанных.Закрыть();
	
	Возврат ФайлСодержитТег(ПутьКФайлуXML, ПараметрыВыполнения);
	
КонецФункции	

Функция ФайлСодержитТег(ПутьКФайлуXML, ПараметрыВыполнения)
		
	ФайлXML = Новый Файл(ПутьКФайлуXML);
	Если ФайлXML.Существует() И ФайлXML.Размер() > 0 Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПутьКФайлуXML);
	Иначе
		ОтправитьСообщение(ПолучитьТекстСообщения(ПараметрыВыполнения, "Файл " + ПутьКФайлуXML + " не существует. Чтение невозможно."));
		Возврат Ложь;
	КонецЕсли;
	
	Построитель	= Новый ПостроительDOM;
	ДокументDOM = Построитель.Прочитать(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
		
	Разыменователь = Новый РазыменовательПространствИменDOM(ПолучитьСоответствиеПространствИмен(ДокументDOM, ПолучитьПрефиксTNS()));
	
	НаборУзлов1 = ДокументDOM.ВычислитьВыражениеXPath(ПараметрыВыполнения.ЗапросXPath1, ДокументDOM, Разыменователь, ТипРезультатаDOMXPath.Число);
	НаборУзлов2 = ДокументDOM.ВычислитьВыражениеXPath(ПараметрыВыполнения.ЗапросXPath2, ДокументDOM, Разыменователь, ТипРезультатаDOMXPath.Число);
	
	ФайлXML = Новый Файл(ПутьКФайлуXML);
	Если ФайлXML.Существует() Тогда
		УдалитьФайлы(ПутьКФайлуXML);
	Иначе
		ОтправитьСообщение(ПолучитьТекстСообщения(ПараметрыВыполнения, "Файл " + ПутьКФайлуXML + " не существует. Удалить невозможно."));
	КонецЕсли;	
	
	Возврат НаборУзлов1.ЧисловоеЗначение > НаборУзлов2.ЧисловоеЗначение;
	
КонецФункции
#Конецобласти

#Область РаботаСXML
Функция ПолучитьПрефиксTNS()
	Возврат "t";
КонецФункции	

Функция ПолучитьСоответствиеПространствИмен(ДокументDOM, ПрефиксTNS)
	
	СоответствиеПИ = Новый Соответствие;
	СчетчикTNS = 0;
	
	Для Каждого Атрибут Из ДокументDOM.ЭлементДокумента.Атрибуты Цикл
		
		Если Атрибут.Префикс = "xmlns" Тогда
			
			Если Атрибут.ЛокальноеИмя = ПрефиксTNS Тогда
				СчетчикTNS = СчетчикTNS + 1;
				ЛокальноеИмя = ПрефиксTNS + СчетчикTNS;
			Иначе
				ЛокальноеИмя = Атрибут.ЛокальноеИмя;
			КонецЕсли;
			
			СоответствиеПИ.Вставить(ЛокальноеИмя, Атрибут.Значение);
			
		КонецЕсли;
		
		Если ДокументDOM.ПространствоИменПоУмолчанию(Атрибут.Значение) Тогда
			
			СоответствиеПИ.Вставить(ПрефиксTNS, Атрибут.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеПИ;
	
КонецФункции
#Конецобласти

#Область Вспомогательные
Процедура ОтправитьСообщение(ТекстСообщения)
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
КонецПроцедуры	

Функция ПолучитьТекстСообщения(ПараметрыВыполнения, ТекстСообщения = "")
	СтатусВыполнения			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Файл (%1 из %2)'"), ПараметрыВыполнения.Номер, ПараметрыВыполнения.Всего);
	Процент						= 100 * ПараметрыВыполнения.Номер / ПараметрыВыполнения.Всего;
	//ПараметрыВыполнения.Порядок = ПараметрыВыполнения.Порядок + 1;
	//Порядок						= Формат(ПараметрыВыполнения.НомерПорции, "ЧЦ=2; ЧВН=; ЧГ=") + "/" + Формат(ПараметрыВыполнения.Порядок, "ЧЦ=10; ЧВН=; ЧГ=");
	//СтруктураСообщения			= Новый Структура("Процент, СтатусВыполнения, Порядок, ТекстСообщения", Процент, СтатусВыполнения, Порядок, ТекстСообщения);
	СтруктураСообщения			= Новый Структура("Процент, СтатусВыполнения", Процент, СтатусВыполнения);
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(СтруктураСообщения)
КонецФункции	
#Конецобласти
