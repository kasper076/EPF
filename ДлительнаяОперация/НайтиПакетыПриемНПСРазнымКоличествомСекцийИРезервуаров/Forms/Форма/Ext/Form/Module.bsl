&НаКлиенте
Перем ПараметрыОбработчикаОжиданияДлительнойОперации;

#Область СобытияФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПутьКВнешнейОбработке = РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	АдресХранилищаВнешнейОбработки = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ЭтаФорма.ПутьКВнешнейОбработке), УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Для Каждого ДанныеЗадания Из ДанныеЗаданий Цикл
		ФоновоеЗаданиеОтменить(ДанныеЗадания.ИдентификаторЗадания);
	КонецЦикла;
	ДанныеЗаданий.Очистить();
	
КонецПроцедуры
#КонецОбласти

#Область КомандыФормы
&НаКлиенте
Процедура ВыполнитьДлительнуюОперациюСервер(Команда)
	
	Если ДанныеЗаданий.Количество() > 0 Тогда	
		ПоказатьПредупреждение(, НСтр("ru='Задача уже выполняется. Дождитесь завершения либо закройте обработку.'"));
		Возврат;
	КонецЕсли;
	
	КоличествоЭлементов = ПолучитьКоличествоЭлементовНаСервере();
	
	Для НомерПорции = 1 По КоличествоПорций Цикл
		ЗапуститьНаСервере(КоличествоЭлементов, КоличествоПорций, НомерПорции);
	КонецЦикла;

	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияДлительнойОперации);
	
	ПодключитьОбработчикОжидания("ПроверитьНаКлиенте", 1, Истина);
	
	ПараметрыОбработчикаОжиданияДлительнойОперации.МаксимальныйИнтервал = 1;
		   
КонецПроцедуры
#КонецОбласти

#Область ВыполнениеОбработкиФономНаСервереСИндикациейПрогрессаНаКлиенте
&НаСервере
Процедура ЗагрузитьРезультат(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// здесь обрабатываем полученный результат (если требуется)
	Если СписокФайлов.Количество() = 0 Тогда
		СписокФайлов.Загрузить(Результат);
	Иначе
		Для Каждого ТекСтрока Из Результат Цикл
			ЗаполнитьЗначенияСвойств(СписокФайлов.Добавить(), ТекСтрока);
		КонецЦикла;	
	КонецЕсли;	
	// завершаем обработку результата
	
	УдалитьИзВременногоХранилища(АдресРезультата);
	//ДанныеЗаданий.Удалить(ДанныеЗаданий.Индекс(ДанныеЗадания));
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьНаСервере(КоличествоЭлементов, КоличествоПорций, НомерПорции)
	
	Если Не ЗначениеЗаполнено(ПутьКВнешнейОбработкеНаСервере) Тогда
		ПутьКВнешнейОбработкеНаСервере = ПолучитьИмяВременногоФайла("epf");
		ПолучитьИзВременногоХранилища(АдресХранилищаВнешнейОбработки).Записать(ПутьКВнешнейОбработкеНаСервере);
	КонецЕсли;	
	
	// Запуск фонового задания
	ПараметрыДлительнойОперации = Новый Структура;
	ПараметрыДлительнойОперации.Вставить("ПериодЗаписи",		1); // Секунд
	ПараметрыДлительнойОперации.Вставить("ТипОбъекта",			ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.рн_ПриемНП")); // 
	ПараметрыДлительнойОперации.Вставить("ЗапросXPath1",		ЗапросXPath1); // 
	ПараметрыДлительнойОперации.Вставить("ЗапросXPath2",		ЗапросXPath2); // 
	ПараметрыДлительнойОперации.Вставить("КоличествоЭлементов", КоличествоЭлементов);
	ПараметрыДлительнойОперации.Вставить("КоличествоПорций",	КоличествоПорций); // 
	ПараметрыДлительнойОперации.Вставить("НомерПорции",			НомерПорции); // 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяОбработки", 					ПутьКВнешнейОбработкеНаСервере);
	СтруктураПараметров.Вставить("ИмяМетода", 						"ВыполнитьДлительнуюОперацию"); //Имя процедуры в модуле объекта, которая выполнится
	СтруктураПараметров.Вставить("ПараметрыВыполнения", 			ПараметрыДлительнойОперации);
	СтруктураПараметров.Вставить("ЭтоВнешняяОбработка", 			Истина); 
	СтруктураПараметров.Вставить("ДополнительнаяОбработкаСсылка", 	Неопределено); 
	
	ПараметрыВыполнения	= ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне		= Истина;
	ПараметрыВыполнения.ОжидатьЗавершение	= 0;
	ПараметрыВыполнения.БезРасширений		= Истина;
	
	//Запускаем фоновое
	Результат = ДлительныеОперации.ВыполнитьВФоне("ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки", СтруктураПараметров, ПараметрыВыполнения);  
	
	//Добавляем ИД задания в таблицу
	НайденныеСтроки = ДанныеЗаданий.НайтиСтроки(Новый Структура("ИдентификаторЗадания", Результат.ИдентификаторЗадания)); 	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ДанныеЗадания = ДанныеЗаданий.Добавить();
	Иначе
		ДанныеЗадания = НайденныеСтроки.Получить(0);
	Конецесли;	
	ЗаполнитьЗначенияСвойств(ДанныеЗадания, Результат);		
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ИдентификаторЗадания)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьОбработкуНаСервере(ПутьКВнешнейОбработкеНаСервере)
	Если ПустаяСтрока(ПутьКВнешнейОбработкеНаСервере) Тогда
		Возврат;
	КонецЕсли;
	ФайлВнешнейОбработки = Новый Файл(ПутьКВнешнейОбработкеНаСервере);
	Если ФайлВнешнейОбработки.Существует() Тогда
		УдалитьФайлы(ПутьКВнешнейОбработкеНаСервере);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаКлиенте()
	
	НайденныеСтроки = ДанныеЗаданий.НайтиСтроки(Новый Структура("ЗаданиеВыполнено", Ложь));
	Для Каждого ДанныеЗадания Из НайденныеСтроки Цикл
		Если ЗаданиеВыполнено(ДанныеЗадания.ИдентификаторЗадания) Тогда
			ДанныеЗадания.ЗаданиеВыполнено = Истина;
			ЗагрузитьРезультат(ДанныеЗадания.АдресРезультата);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияДлительнойОперации);
			ПодключитьОбработчикОжидания("ПроверитьНаКлиенте", ПараметрыОбработчикаОжиданияДлительнойОперации.ТекущийИнтервал, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПрогресс();

	Если ДанныеЗаданий.НайтиСтроки(Новый Структура("ЗаданиеВыполнено", Истина)).Количество() = КоличествоПорций Тогда
		УдалитьОбработкуНаСервере(ПутьКВнешнейОбработкеНаСервере);
		ПоказатьПредупреждение(, "Выполнение длительной серверной операции успешно завершено");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанных
&НаСервере
Функция ПолучитьКоличествоЭлементовНаСервере()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	рн_СеансыОбменаОбъекты.Ссылка КАК СеансОбмена
	|ПОМЕСТИТЬ ВТ_Сеансы
	|ИЗ
	|	Документ.рн_СеансыОбмена.Объекты КАК рн_СеансыОбменаОбъекты
	|ГДЕ
	|	рн_СеансыОбменаОбъекты.ТипОбъекта = &ТипОбъекта
	|	И рн_СеансыОбменаОбъекты.Ссылка.Система = ЗНАЧЕНИЕ(Справочник.рн_МодулиИнтеграции.GCрозница)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СеансОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоЭлементов
	|ИЗ
	|	Справочник.рн_СеансыОбменаПрисоединенныеФайлы КАК рн_СеансыОбменаПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Сеансы КАК ВТ_Сеансы
	|		ПО рн_СеансыОбменаПрисоединенныеФайлы.ВладелецФайла = ВТ_Сеансы.СеансОбмена");
	
	Запрос.Параметры.Вставить("ТипОбъекта", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.рн_ПриемНП"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоЭлементов;
КонецФункции	
#КонецОбласти

&НаСервере
Процедура ОбновитьПрогресс()
	Для Каждого ДанныеЗадания Из ДанныеЗаданий Цикл
		
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ДанныеЗадания.ИдентификаторЗадания);
		Если Задание = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МассивСообщений = Задание.ПолучитьСообщенияПользователю(Истина);
		Если МассивСообщений = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекСообщение Из МассивСообщений Цикл
			СтруктураСообщения = ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекСообщение.Текст);
			//ЗаполнитьЗначенияСвойств(Лог.Добавить(), СтруктураСообщения);
			ЗаполнитьЗначенияСвойств(ДанныеЗадания, СтруктураСообщения);
		КонецЦикла;	
	КонецЦикла;	
	Лог.Сортировать("Порядок");
КонецПроцедуры	